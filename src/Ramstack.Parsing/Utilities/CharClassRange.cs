namespace Ramstack.Parsing.Utilities;

/// <summary>
/// Represents a range of characters with inclusive lower and upper bounds.
/// </summary>
[DebuggerDisplay("{ToString(),nq}")]
internal readonly struct CharClassRange : IEquatable<CharClassRange>, IComparable<CharClassRange>
{
    /// <summary>
    /// The character range merged value.
    /// </summary>
    public readonly int Value;

    /// <summary>
    /// Gets the lower bound of the character range.
    /// </summary>
    public char Lo => (char)Value;

    /// <summary>
    /// Gets the upper bound of the character range.
    /// </summary>
    public char Hi => (char)(Value >>> 16);

    /// <summary>
    /// Gets a value that indicates whether this range represents a single character.
    /// </summary>
    public bool IsSingleCharacter => Lo == Value >>> 16;

    /// <summary>
    /// Gets a value that indicates whether this range covers the entire possible range of characters.
    /// </summary>
    public bool IsFullRange => Value == '\uFFFF' << 16;

    /// <summary>
    /// Gets the total number of symbols within this character range.
    /// </summary>
    /// <remarks>
    /// This property calculates the number of symbols included in the range,
    /// determined as the difference between the upper bound (<see cref="Hi"/>)
    /// and the lower bound (<see cref="Lo"/>) of the range, inclusive.
    /// </remarks>
    public int SymbolCount => (Value >>> 16) - Lo + 1;

    /// <summary>
    /// Initializes a new instance of the <see cref="CharClassRange"/> structure.
    /// </summary>
    /// <param name="value">The character range.</param>
    private CharClassRange(int value) =>
        Value = value;

    /// <summary>
    /// Deconstructs the range into its lower and upper bounds.
    /// </summary>
    /// <param name="lo">The inclusive lower bound of the range.</param>
    /// <param name="hi">The inclusive upper bound of the range.</param>
    public void Deconstruct(out char lo, out char hi)
    {
        lo = Lo;
        hi = Hi;
    }

    /// <inheritdoc />
    public bool Equals(CharClassRange other) =>
        Value == other.Value;

    /// <inheritdoc />
    public int CompareTo(CharClassRange other)
    {
        return CompareToImpl(this, other);

        static int CompareToImpl(CharClassRange a, CharClassRange b)
        {
            var result = a.Lo - b.Lo;
            return result == 0
                ? (a.Value >>> 16) - (b.Value >>> 16)
                : result;
        }
    }

    /// <inheritdoc />
    public override bool Equals(object? obj) =>
        obj is CharClassRange other && Equals(other);

    /// <inheritdoc />
    public override int GetHashCode() =>
        Value;

    /// <inheritdoc />
    public override string ToString() =>
        this.ToPrintable();

    /// <summary>
    /// Creates an array of <see cref="CharClassRange"/> instances from the specified span of characters.
    /// </summary>
    /// <param name="chars">A read-only span of characters to convert.</param>
    /// <returns>
    /// An array of <see cref="CharClassRange"/> instances representing the specified characters.
    /// </returns>
    public static CharClassRange[] Create(ReadOnlySpan<char> chars)
    {
        Argument.ThrowIfEmpty(chars);

        var ranges = new CharClassRange[chars.Length];

        // Note: The following condition is redundant, but it is included specifically
        // to eliminate bounds checks generated by the JIT compiler.
        if (ranges.Length == chars.Length)
            for (var i = 0; i < chars.Length; i++)
                ranges[i] = Create(chars[i]);

        return ranges;
    }

    /// <summary>
    /// Creates a <see cref="CharClassRange"/> for a single character.
    /// </summary>
    /// <param name="c">The character to define the range.</param>
    /// <returns>
    /// A <see cref="CharClassRange"/> representing the single character.
    /// </returns>
    public static CharClassRange Create(char c) =>
        new CharClassRange(c | (c << 16));

    /// <summary>
    /// Creates a <see cref="CharClassRange"/> with specified lower and upper bounds.
    /// </summary>
    /// <param name="lo">The inclusive lower bound of the range.</param>
    /// <param name="hi">The inclusive upper bound of the range.</param>
    /// <returns>
    /// A <see cref="CharClassRange"/> representing the specified range.
    /// </returns>
    public static CharClassRange Create(char lo, char hi)
    {
        Argument.ThrowIfGreaterThan(lo, hi);
        return new CharClassRange(lo | (hi << 16));
    }

    /// <summary>
    /// Creates a <see cref="CharClassRange"/> for the specified character range.
    /// </summary>
    /// <param name="value">The character range.</param>
    /// <returns>
    /// A <see cref="CharClassRange"/> representing the specified range.
    /// </returns>
    public static CharClassRange CreateMasked(int value) =>
        new CharClassRange(value);

    /// <summary>
    /// Implicitly converts a <see cref="CharClassRange"/> to a tuple of its bounds.
    /// </summary>
    /// <param name="range">The <see cref="CharClassRange"/> to convert.</param>
    /// <returns>
    /// A tuple containing the lower and upper bounds.
    /// </returns>
    public static implicit operator (char lo, char hi)(CharClassRange range) =>
        (range.Lo, range.Hi);

    /// <summary>
    /// Compares two <see cref="CharClassRange"/> instances for equality.
    /// </summary>
    public static bool operator ==(CharClassRange left, CharClassRange right) =>
        left.Value == right.Value;

    /// <summary>
    /// Compares two <see cref="CharClassRange"/> instances for inequality.
    /// </summary>
    public static bool operator !=(CharClassRange left, CharClassRange right) =>
        left.Value != right.Value;

    /// <summary>
    /// Compares whether one <see cref="CharClassRange"/> instance is less than another.
    /// </summary>
    public static bool operator <(CharClassRange left, CharClassRange right) =>
        left.CompareTo(right) < 0;

    /// <summary>
    /// Compares whether one <see cref="CharClassRange"/> instance is greater than another.
    /// </summary>
    public static bool operator >(CharClassRange left, CharClassRange right) =>
        left.CompareTo(right) > 0;

    /// <summary>
    /// Compares whether one <see cref="CharClassRange"/> instance is less than or equal to another.
    /// </summary>
    public static bool operator <=(CharClassRange left, CharClassRange right) =>
        left.CompareTo(right) <= 0;

    /// <summary>
    /// Compares whether one <see cref="CharClassRange"/> instance is greater than or equal to another.
    /// </summary>
    public static bool operator >=(CharClassRange left, CharClassRange right) =>
        left.CompareTo(right) >= 0;
}

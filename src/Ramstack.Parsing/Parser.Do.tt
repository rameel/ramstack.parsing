<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="Properties\Autogenerated.ttinclude" #>
#nullable enable

namespace Ramstack.Parsing;

partial class Parser
{
<#
    for (var n = 2; n <= 10; n++)
    {
        WriteSeparatorLine(n != 2);
        GenerateMethod(n);
    }

    for (var n = 2; n <= 10; n++)
    {
        WriteLine();
        GenerateClass(n);
    }
#>
}
<#+ private void GenerateMethod(int arity) { #>
    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<<#=GenerateGenericParameters(arity)#>, TResult>(this Parser<(<#=GenerateTupleParameters(arity)#>)> parser, Func<<#=GenerateGenericParameters(arity)#>, TResult> func) =>
        new DoParser<<#=GenerateGenericParameters(arity)#>, TResult>(parser, func);
<#+ } #>
<#+ private void GenerateClass(int arity) { #>
    #region Inner type: DoParser<<#=GenerateGenericParameters(arity)#>, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<<#=GenerateGenericParameters(arity)#>, TResult>(Parser<(<#=GenerateGenericParameters(arity)#>)> parser, Func<<#=GenerateGenericParameters(arity)#>, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(<#=GenerateList(arity, n => $"v.Item{n}", from: 1)#>)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<<#=GenerateGenericParameters(arity)#>, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion
<#+ } #>
<#+ private string GenerateGenericParameters(int arity) => GenerateList(arity, n => $"T{n}", from: 1); #>
<#+ private string GenerateTupleParameters(int arity) => GenerateList(arity, n => $"T{n}", from: 1); #>

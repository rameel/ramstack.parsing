<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="Properties\Autogenerated.ttinclude" #>
#nullable enable

namespace Ramstack.Parsing;

partial class Parser
{
<#
    for (var n = 2; n <= 10; n++)
    {
        WriteSeparatorLine(n != 2);
        GenerateMethods(n);
    }

    for (var n = 2; n <= 10; n++)
    {
        WriteLine();
        GenerateClasses(n);
    }
#>
}
<#+ private void GenerateMethods(int arity) { #>
    /// <summary>
    /// Creates a parser that applies the specified parsers sequentially that succeeds only when all parsers succeed.
    /// </summary>
<#+ for (var n = 1; n <= arity; n++) { #>
    /// <param name="parser<#=n#>">The parser instance.</param>
<#+ } #>
    /// <returns>
    /// A parser that applies the specified parsers sequentially and returns a tuple of their results.
    /// </returns>
    public static Parser<(<#=GenerateList(arity, n => $"T{n} Value{n}", from: 1)#>)> Seq<<#=GenerateList(arity, n => $"T{n}", from: 1)#>>(<#=GenerateList(arity, n => $"Parser<T{n}> parser{n}", from: 1, separator: ", ")#>) =>
        new SeqParser<<#=GenerateList(arity, n => $"T{n}", from: 1)#>>(<#=GenerateList(arity, n => $"parser{n}", from: 1, separator: ", ")#>);

    /// <summary>
    /// Creates a parser that applies the specified parsers sequentially that succeeds only when all parsers succeed.
    /// </summary>
<#+ for (var n = 1; n <= arity; n++) { #>
    /// <param name="parser<#=n#>">The parser instance.</param>
<#+ } #>
    /// <returns>
    /// A parser that applies the specified parsers sequentially.
    /// </returns>
    public static Parser<Unit> Seq(<#=GenerateList(arity, n => $"Parser<Unit> parser{n}", from: 1, separator: ", ")#>) =>
        new VoidSeq<#=arity#>Parser(<#=GenerateList(arity, n => $"parser{n}", from: 1, separator: ", ")#>);
<#+ } #>
<#+ private void GenerateClasses(int arity) { #>
    #region Inner type: SeqParser<<#=GenerateList(arity, n => $"T{n}", from: 1)#>>

    /// <summary>
    /// Represents a parser that applies the specified parsers sequentially that succeeds only when all parsers succeed.
    /// </summary>
    private sealed class SeqParser<<#=GenerateList(arity, n => $"T{n}", from: 1)#>> : Parser<(<#=GenerateList(arity, n => $"T{n}", from: 1)#>)>
    {
<#+ for (var n = 1; n <= arity; n++) { #>
        private readonly Parser<T<#=n#>> _parser<#=n#>;
<#+ } #>

        /// <summary>
        /// Initializes a new instance of the <see cref="SeqParser{<#=GenerateList(arity, n => $"T{n}", from: 1, separator: ",")#>}"/> class.
        /// </summary>
        public SeqParser(<#=GenerateList(arity, n => $"Parser<T{n}> parser{n}", from: 1, separator: ", ")#>)
        {
<#+ for (var n = 1; n <= arity; n++) { #>
            _parser<#=n#> = parser<#=n#>;
<#+ } #>
        }

        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, out (<#=GenerateList(arity, n => $"T{n}", from: 1)#>) value)
        {
            var bookmark = context.BookmarkPosition();

            if (_parser1.TryParse(ref context, out value.Item1!)
<#+ for (var n = 2; n <= arity; n++) { #>
                && _parser<#=n#>.TryParse(ref context, out value.Item<#=n#>!)
<#+ } #>
            )
            {
                context.SetMatched(bookmark);
                return true;
            }

            context.RestorePosition(bookmark);
            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            new VoidSeq<#=arity#>Parser(<#=GenerateList(arity, n => $"_parser{n}.Void()", from: 1, separator: ", ")#>);
    }

    #endregion

    #region Inner type: VoidSeq<#=arity#>Parser

    /// <summary>
    /// Represents a specialized parser that applies the specified parsers sequentially that succeeds only when all parsers succeed.
    /// </summary>
    private sealed class VoidSeq<#=arity#>Parser : Parser<Unit>
    {
<#+ for (var n = 1; n <= arity; n++) { #>
        private readonly Parser<Unit> _parser<#=n#>;
<#+ } #>

        /// <summary>
        /// Initializes a new instance of the <see cref="VoidSeq<#=arity#>Parser"/> class.
        /// </summary>
        public VoidSeq<#=arity#>Parser(<#=GenerateList(arity, n => $"Parser<Unit> parser{n}", from: 1, separator: ", ")#>)
        {
<#+ for (var n = 1; n <= arity; n++) { #>
            _parser<#=n#> = parser<#=n#>;
<#+ } #>
        }

        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, out Unit value)
        {
            var bookmark = context.BookmarkPosition();

            if (_parser1.TryParse(ref context, out value)
<#+ for (var n = 2; n <= arity; n++) { #>
                && _parser<#=n#>.TryParse(ref context, out value)
<#+ } #>            )
            {
                context.SetMatched(bookmark);
                return true;
            }

            context.RestorePosition(bookmark);
            return false;
        }
    }

    #endregion
<#+ } #>

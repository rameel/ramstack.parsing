//----------------------------------------------------------------------------//
// <auto-generated>                                                           //
//     This code was generated by a tool.                                     //
//                                                                            //
//     Changes to this file may cause incorrect behavior                      //
//     and will be lost if the code is regenerated.                           //
// </auto-generated>                                                          //
//----------------------------------------------------------------------------//

#nullable enable

namespace Ramstack.Parsing;

partial class Parser
{
    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<T1, T2, TResult>(this Parser<(T1, T2)> parser, Func<T1, T2, TResult> func) =>
        new DoParser<T1, T2, TResult>(parser, func);

    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<T1, T2, T3, TResult>(this Parser<(T1, T2, T3)> parser, Func<T1, T2, T3, TResult> func) =>
        new DoParser<T1, T2, T3, TResult>(parser, func);

    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<T1, T2, T3, T4, TResult>(this Parser<(T1, T2, T3, T4)> parser, Func<T1, T2, T3, T4, TResult> func) =>
        new DoParser<T1, T2, T3, T4, TResult>(parser, func);

    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<T1, T2, T3, T4, T5, TResult>(this Parser<(T1, T2, T3, T4, T5)> parser, Func<T1, T2, T3, T4, T5, TResult> func) =>
        new DoParser<T1, T2, T3, T4, T5, TResult>(parser, func);

    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<T1, T2, T3, T4, T5, T6, TResult>(this Parser<(T1, T2, T3, T4, T5, T6)> parser, Func<T1, T2, T3, T4, T5, T6, TResult> func) =>
        new DoParser<T1, T2, T3, T4, T5, T6, TResult>(parser, func);

    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<T1, T2, T3, T4, T5, T6, T7, TResult>(this Parser<(T1, T2, T3, T4, T5, T6, T7)> parser, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func) =>
        new DoParser<T1, T2, T3, T4, T5, T6, T7, TResult>(parser, func);

    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this Parser<(T1, T2, T3, T4, T5, T6, T7, T8)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func) =>
        new DoParser<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(parser, func);

    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this Parser<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func) =>
        new DoParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(parser, func);

    /// <summary>
    /// Creates a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function used to transform the parser's output.</param>
    /// <returns>
    /// A parser that applies a transformation function to the value produced by the specified parser.
    /// </returns>
    public static Parser<TResult> Do<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this Parser<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func) =>
        new DoParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(parser, func);

    #region Inner type: DoParser<T1, T2, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<T1, T2, TResult>(Parser<(T1, T2)> parser, Func<T1, T2, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(v.Item1, v.Item2)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<T1, T2, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion

    #region Inner type: DoParser<T1, T2, T3, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<T1, T2, T3, TResult>(Parser<(T1, T2, T3)> parser, Func<T1, T2, T3, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(v.Item1, v.Item2, v.Item3)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<T1, T2, T3, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion

    #region Inner type: DoParser<T1, T2, T3, T4, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<T1, T2, T3, T4, TResult>(Parser<(T1, T2, T3, T4)> parser, Func<T1, T2, T3, T4, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(v.Item1, v.Item2, v.Item3, v.Item4)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<T1, T2, T3, T4, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion

    #region Inner type: DoParser<T1, T2, T3, T4, T5, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<T1, T2, T3, T4, T5, TResult>(Parser<(T1, T2, T3, T4, T5)> parser, Func<T1, T2, T3, T4, T5, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(v.Item1, v.Item2, v.Item3, v.Item4, v.Item5)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<T1, T2, T3, T4, T5, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion

    #region Inner type: DoParser<T1, T2, T3, T4, T5, T6, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<T1, T2, T3, T4, T5, T6, TResult>(Parser<(T1, T2, T3, T4, T5, T6)> parser, Func<T1, T2, T3, T4, T5, T6, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(v.Item1, v.Item2, v.Item3, v.Item4, v.Item5, v.Item6)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<T1, T2, T3, T4, T5, T6, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion

    #region Inner type: DoParser<T1, T2, T3, T4, T5, T6, T7, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<T1, T2, T3, T4, T5, T6, T7, TResult>(Parser<(T1, T2, T3, T4, T5, T6, T7)> parser, Func<T1, T2, T3, T4, T5, T6, T7, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(v.Item1, v.Item2, v.Item3, v.Item4, v.Item5, v.Item6, v.Item7)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<T1, T2, T3, T4, T5, T6, T7, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion

    #region Inner type: DoParser<T1, T2, T3, T4, T5, T6, T7, T8, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Parser<(T1, T2, T3, T4, T5, T6, T7, T8)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(v.Item1, v.Item2, v.Item3, v.Item4, v.Item5, v.Item6, v.Item7, v.Item8)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion

    #region Inner type: DoParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Parser<(T1, T2, T3, T4, T5, T6, T7, T8, T9)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(v.Item1, v.Item2, v.Item3, v.Item4, v.Item5, v.Item6, v.Item7, v.Item8, v.Item9)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion

    #region Inner type: DoParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>

    /// <summary>
    /// Represents a parser that applies a transformation function to the value produced by the specified parser.
    /// </summary>
    /// <param name="parser">The parser whose output will be transformed.</param>
    /// <param name="func">The function  used to transform the parser's output.</param>
    private sealed class DoParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(Parser<(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)> parser, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> func) : Parser<TResult>
    {
        /// <inheritdoc />
        public override bool TryParse(ref ParseContext context, [NotNullWhen(true)] out TResult? value)
        {
            if (parser.TryParse(ref context, out var v))
            {
                value = func(v.Item1, v.Item2, v.Item3, v.Item4, v.Item5, v.Item6, v.Item7, v.Item8, v.Item9, v.Item10)!;
                return true;
            }

            value = default;
            return false;
        }

        /// <inheritdoc />
        protected internal override Parser<TResult> ToNamedParser(string? name) =>
            new DoParser<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(parser.ToNamedParser(name), func) { Name = name };

        /// <inheritdoc />
        protected internal override Parser<Unit> ToVoidParser() =>
            parser.Void();
    }

    #endregion
}
